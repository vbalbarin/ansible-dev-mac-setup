---
# tasks file for macos-laptop


- name: username
  ansible.builtin.shell: id -un | xargs -I_ printf "%s" _
  register: username

- name: set user
  ansible.builtin.set_fact:
    user: "{{ username.stdout }}"

- name: cache user name of user executing playbook
  ansible.builtin.debug:
    msg: Caching value {{ user }} for use in privileged tasks 


## ZSH setup

- name: allow comments at the CLI
  ansible.builtin.shell: setopt interactive_comments
  args:
    executable: /bin/zsh

- name: xdg directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: staff
    recurse: true
  loop:
    - "{{ xdg_config_home }}"
    - "{{ xdg_data_home }}"
    - "{{ xdg_state_home }}"
    - "{{ xdg_cache_home }}"

- name: zdot directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: staff
    recurse: true
  loop:
    - "{{ xdg_config_home }}/zsh"
    - "{{ xdg_config_home }}/zsh/config.d" 
    - "{{ xdg_state_home }}/zsh"

- name: bootstrap .zshenv
  ansible.builtin.copy:
    src: "zshenv"
    dest: "{{ home }}/.zshenv"
    owner: "{{ user }}"
    group: staff

- name: stub zdot .zshenv file
  ansible.builtin.copy:
    dest: "{{ xdg_config_home }}/zsh/.zshenv"
    content: "# set common PATH variable"
    owner: "{{ user }}"
    group: staff

- name: bootstrap .zprofile
  ansible.builtin.copy:
    src: "zprofile"
    dest: "{{ xdg_config_home }}/zsh/.zprofile"
    owner: "{{ user }}"
    group: staff

- name: bootstrap .zshrc
  ansible.builtin.copy:
    src: "zshrc"
    dest: "{{ xdg_config_home }}/zsh/.zshrc"
    owner: "{{ user }}"
    group: staff

- name: vim xdg-compliant directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: staff
    recurse: true
  loop:
    - "{{ xdg_config_home }}/vim"
    - "{{ xdg_state_home }}/vim"
    - "{{ xdg_state_home }}/vim/swap"
    - "{{ xdg_state_home }}/vim/backup"
    - "{{ xdg_state_home }}/vim/undo"
    - "{{ xdg_data_home }}/vim"
    - "{{ xdg_data_home }}/vim/after"

- name: vimrc
  ansible.builtin.copy:
    src: "vimrc"
    dest: "{{ xdg_config_home }}/vim/vimrc"
    owner: "{{ user }}"
    group: staff


- name: vim xdg-compliant settings
  ansible.builtin.copy:
    src: "20_vim.zsh"
    dest: "{{ xdg_config_home }}/zsh/config.d/20_vim.zsh"
    owner: "{{ user }}"
    group: staff


# Homebrew Install

- name: set homebrew base paths if apple si
  ansible.builtin.set_fact:
    homebrew_prefix: "/opt/homebrew"
    homebrew_repository: "/opt/homebrew"
  when: >
    (ansible_facts['os_family'] == "Darwin") and
    (ansible_facts['architecture'] == "arm64")

- name: set homebrew base paths if apple intel
  ansible.builtin.set_fact:
    homebrew_prefix: "/usr/local"
    homebrew_repository: "/usr/local/Homebrew"
  when: >
    (ansible_facts['os_family'] == "Darwin") and
    (ansible_facts['architecture'] == "x86_64")

- name: set homebrew cache path
  ansible.builtin.set_fact:
    homebrew_cache: "{{ xdg_cache_home }}/Homebrew"
    #homebrew_cache: "{{ home }}/Library/Caches/Homebrew"

- name: purged homebrew cache directory
  ansible.builtin.file:
    path: "{{ homebrew_cache }}"
    state: absent

- name: homebrew base directories - sudo
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: admin
    mode: "775"
    recurse: true
  become: true
  loop:
  #  - "{{ homebrew_prefix }}"
  - "{{ homebrew_repository }}"
  - "{{ homebrew_cache }}"

- name: initialized homebrew cache
  ansible.builtin.file:
    path: "{{ homebrew_cache }}/.cleaned"
    state: touch
    owner: "{{ user }}"
    group: admin
    mode: "664"

- name: homebrew group writable subdirectories
  ansible.builtin.file:
    path: "{{ homebrew_prefix }}/{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: admin
    mode: '775'
    recurse: true
  become: true
  loop:
  - bin 
  - etc
  - include
  - lib
  - sbin
  - share
  - opt
  - var/homebrew
  - var/homebrew/linked
  - Cellar
  - Caskroom
  - Frameworks

- name: homebrew user-only writable subdirectories
  ansible.builtin.file:
    path: "{{ homebrew_prefix }}/{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: admin
    mode: '755'
    recurse: true
  loop:
  - share/zsh
  - share/zsh/site-functions

- name: initialized homebrew repo
  ansible.builtin.shell: |
    git -c init.defaultBranch=master init
    git config remote.origin.url "{{ homebrew_git_remote }}"
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git config --bool core.autocrlf false
    git config --bool core.symlinks true
    git fetch --force origin
    git fetch --force --tags origin
    git reset --hard origin/master
  args:
    chdir: "{{ homebrew_repository }}"
    creates: LICENSE.txt

- name: symlink brew on intel
  ansible.builtin.file:
    src: "{{ homebrew_repository }}/bin/brew"
    dest: "{{ homebrew_prefix }}/bin/brew"
    state: link 
    owner: "{{ user }}"
    group: admin
    mode: '775'
    force: true
  become: true
  when: >
    (ansible_facts['os_family'] == "Darwin") and
    (ansible_facts['architecture'] == "x86_64")


- name: xdg osx homebrew settings
  ansible.builtin.template:
    src: "10_brew.zsh.j2"
    dest: "{{ xdg_config_home }}/zsh/config.d/10_brew.zsh"
    owner: "{{ user }}"
    group: staff


## Install Homebrew Packages

- name: install casks
  community.general.homebrew_cask:
    name: "{{ item }}"
    state: upgraded
  loop:
  - iterm2
  - visual-studio-code
  - firefox
  # - microsoft-edge
  # - zoom

